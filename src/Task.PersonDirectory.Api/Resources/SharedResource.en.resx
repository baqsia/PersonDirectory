<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="PersonNotFound" xml:space="preserve">
    <value>Person not found</value>
    <comment/>
  </data>
  <data name="CityNotFound" xml:space="preserve">
    <value>City not found</value>
    <comment/>
  </data>
  <data name="RelationAdded" xml:space="preserve">
    <value>Relation has been added succesfully</value>
  </data>
  <data name="RelationDropped" xml:space="preserve">
    <value>Relation has been dropped succesfully</value>
  </data>
  <data name="RelatedPersonIdMustBeGreaterThanZero" xml:space="preserve">
    <value>Related person id must be greater than zero</value>
  </data>
  <data name="PersonCantBeRelatedToThemselves" xml:space="preserve">
    <value>Person cannot be related to themselves</value>
  </data>
  <data name="FirstNameIsRequired" xml:space="preserve">
    <value>First name is required</value>
  </data>
  <data name="LastNameIsRequired" xml:space="preserve">
    <value>Last name is required</value>
  </data>
  <data name="FirstNameRange" xml:space="preserve">
    <value>First name must be between 2 and 50 characters</value>
  </data>
  <data name="LastNameRange" xml:space="preserve">
    <value>Last name must be between 2 and 50 characters</value>
  </data>
  <data name="FirstNameLettersValidation" xml:space="preserve">
    <value>First name must contain only Georgian or only Latin letters, not both</value>
  </data>
  <data name="LastNameLettersValidation" xml:space="preserve">
    <value>Last name must contain only Georgian or only Latin letters, not both</value>
  </data>
  <data name="GenderIsRequired" xml:space="preserve">
    <value>Gender is required</value>
  </data>
  <data name="GenderMustBeMaleOrFemale" xml:space="preserve">
    <value>Gender must be either 'male' or 'female'</value>
  </data>
  <data name="PersonalNumberIsRequired" xml:space="preserve">
    <value>Personal number must consist of digits only</value>
  </data>
  <data name="PersonalNumberLength" xml:space="preserve">
    <value>Personal number must be exactly 11 digits</value>
  </data>
  <data name="PersonalNumberDigitsOnly" xml:space="preserve">
    <value>Personal number is required</value>
  </data>
  <data name="DateOfBirthIsRequired" xml:space="preserve">
    <value>Date of birth is required</value>
  </data>
  <data name="MustBeAtLeast18" xml:space="preserve">
    <value>Person must be at least 18 years old</value>
  </data>
  <data name="CityIdMustBePositive" xml:space="preserve">
    <value>City ID must be a positive integer</value>
  </data>
  <data name="PhoneNumberTypeIsRequired" xml:space="preserve">
    <value>Phone number type is required</value>
  </data>
  <data name="PhoneNumberTypeInvalid" xml:space="preserve">
    <value>Phone number type must be 'mobile', 'office', or 'home'</value>
  </data>
  <data name="PhoneNumberIsRequired" xml:space="preserve">
    <value>Phone number is required</value>
  </data>
  <data name="PhoneNumberLengthRange" xml:space="preserve">
    <value>Phone number must be between 4 and 50 characters</value>
  </data>
  <data name="FileIsRequired" xml:space="preserve">
    <value>File must be provided</value>
  </data>
  <data name="FileIsEmpty" xml:space="preserve">
    <value>File is empty</value>
  </data>
  <data name="ImageMinimumSize" xml:space="preserve">
    <value>Image must be less than 2MB</value>
  </data>
  <data name="ImageTypesAllowed" xml:space="preserve">
    <value>Only .jpg, .jpeg, or .png files are allowed</value>
  </data>
  <data name="PageMustNotBeNegativeOrZero" xml:space="preserve">
    <value>Page number must be greater than 0</value>
  </data>
  <data name="PageSizeMustBeBetween1to100" xml:space="preserve">
    <value>Page size must be between 1 and 100</value>
  </data>
  <data name="PersonIdMustBeGreaterThanZero" xml:space="preserve">
    <value>PersonId must be greater than zero</value>
  </data>
</root>